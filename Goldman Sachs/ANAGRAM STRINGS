Q: Given an array of strings, return all groups of strings that are anagrams.
https://practice.geeksforgeeks.org/problems/print-anagrams-together/1/

#######################################################################
Given an array of strings, return all groups of strings that are anagrams. The groups must be created in order of their appearance in the original array. 
Look at the sample case for clarification.


Example 1:

Input:
N = 5
words[] = {act,god,cat,dog,tac}
Output:
act cat tac 
god dog
Explanation:
There are 2 groups of
anagrams "god", "dog" make group 1.
"act", "cat", "tac" make group 2.

Example 2:
Input:
N = 3
words[] = {no,on,is}
Output: 
no on
is
Explanation:
There are 2 groups of
anagrams "no", "on" make group 1.
"is" makes group 2. 

Your Task:
The task is to complete the function Anagrams() that takes a list of strings as input and returns a list of groups such that each group consists of all the strings that are anagrams.


Expected Time Complexity: O(N*|S|*log|S|), where |S| is the length of the strings.
Expected Auxiliary Space: O(N*|S|), where |S| is the length of the strings.


Constraints:
1<=N<=100

#########################################
CODE:


///Logic: yaha ek map lo string,vector<string> type ka. fir pheli stringlist ko traverse kro and
/// ek string mein store krlo act ab isey sort krdo and fir map['act']=stringlist[i] element ko
///daaldo map mein.iske baad vector<vector<string>> mein dalne ke lie 
///map ko iterate kro and uska 2nd daaldo.
 




// { Driver Code Starts
//Initial Template for C++
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;


 // } Driver Code Ends
//User function Template for C++

class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& string_list) {
      
      map<string,vector<string> >mp; ///for storing in map.
        for(int i=0;i<string_list.size();i++)
        {
            string st=string_list[i];
            sort(st.begin(),st.end());
            
            mp[st].push_back(string_list[i]);
        }
        
        vector<vector<string> >ans(mp.size());
        int index=0;
        for(auto it:mp)
        {
            auto v=it.second;
            for(int i=0;i<v.size();i++)
                ans[index].push_back(v[i]);
            index++;
        }
        
        return ans;
        //code here
    }
};

// { Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<string> string_list(n);
        for (int i = 0; i < n; ++i)
            cin>>string_list[i]; 
        Solution ob;
        vector<vector<string> > result = ob.Anagrams(string_list);
        sort(result.begin(),result.end());
        for (int i = 0; i < result.size(); i++)
        {
            for(int j=0; j < result[i].size(); j++)
            {
                cout<<result[i][j]<<" ";
            }
            cout<<"\n";
        }
    }

    return 0;
}
  // } Driver Code Ends

